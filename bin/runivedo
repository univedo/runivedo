#!/usr/bin/env ruby -KU

$: << File.dirname(__FILE__) + "/../lib"

require 'runivedo'
require 'rainbow'
require 'readline'
require 'readline/history/restore'
require 'terminal-table'
require 'optparse'

include Runivedo

Thread.abort_on_exception = true

def pluralize(singular, count)
  "#{count} #{singular}#{count != 1 ? 's' : ''}"
end

HIST_FILE = "#{ENV["HOME"]}/.runivedo_history"
Readline::History::Restore.new(HIST_FILE)

def readline_wrapper
  line = Readline.readline('â†’ '.color(:blue).bright, true)
  return nil if line.nil?
  if line =~ /^\s*$/ or Readline::HISTORY.to_a[-2] == line
    Readline::HISTORY.pop
  end
  line
end

# Completion
COMPLETION = [
  "add", "aid", "alter", "and", "as", "assign", "avg", "begin", "binaryCond",
  "by", "check", "column", "combine", "commit", "constraint", "count", "create",
  "cross", "delete", "distinct", "drop", "except", "fields", "file", "for",
  "from", "full", "function", "group", "having", "ilike", "in", "inner",
  "insert","into", "is", "join", "jtype", "left", "lift", "like", "max", "min",
  "natural", "not", "not null", "null", "of", "on", "operator", "or", "order",
  "primary key", "query", "release", "res", "right", "rollback", "savepoint",
  "select", "set", "share", "sum", "table", "to", "transaction", "unique",
  "update", "using", "value", "values", "where"
].sort.map(&:upcase)
comp = proc { |s| COMPLETION.grep(/^#{Regexp.escape(s)}/i) }
Readline.completion_append_character = " "
Readline.completion_proc = comp

options = {}
op = OptionParser.new do |opts|
  opts.banner = "Usage: runivedo [options] <url>"
  opts.on('-u', '--user USER', "Username") { |user| options[:user] = user }
  opts.on('-p', '--password PASSWORD', "Password") { |password| options[:password] = password }
  opts.on('-a', '--app UUID', "App UUID") { |app| options[:app] = app }
  opts.on('-v', "--version", "Show version") do
    puts "Runivedo #{VERSION}"
    exit
  end
  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end
end
op.parse!

if ARGV.count == 0
  puts op
  exit
end

options[:url] = ARGV[0]

runivedo = Runivedo::Connection.new(options[:url], 0x2610 => "marvin")
perspective = runivedo.get_perspective(options[:app])
query = perspective.query
puts "Connected."

while line = readline_wrapper
  break if line.nil?
  line.strip!
  next if line.empty?
  case line
  when "q", "quit", "exit"
    break
  when "version", "info", "v"
    puts "Runivedo Shell #{VERSION}"
    puts "(c) 2012-2013 Univedo"
  when "help", "h", "?"
    puts "Runivedo Shell #{VERSION} Help"
    puts "TODO"
  else
    begin
      stmt = query.prepare(line)
      cols = stmt.get_column_names
      result = stmt.execute
      arr = result.to_a.map do |row|
        row.map do |col|
          col.nil? ? 'null ' : col.to_s
        end
      end
      if arr.count > 0
        col_count = arr[0].count
        puts Terminal::Table.new rows: arr, headings: cols.map(&:bright)
        puts "#{pluralize("row", arr.count)} returned.".color(:green)
      else
        puts "#{pluralize("row", result.num_affected_rows)} affected.".color(:green)
      end
    rescue RunivedoSqlError => e
      puts "SQL Error: #{e.to_s}".color(:red)
    rescue => e
      puts "Caught exception:"
      puts e.to_s.color(:red)
      puts e.backtrace
      exit 1
    end
  end
end

runivedo.close

puts
puts "Bye"
